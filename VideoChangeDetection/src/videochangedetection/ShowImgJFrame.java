package videochangedetection;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.opencv.core.Mat;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;

/**
 *
 * @author crl
 */
public class ShowImgJFrame extends javax.swing.JFrame {
boolean frameCap = false;
    
int k=0;
    /**
     * Creates new form ShowImgJFrame
     */
    public ShowImgJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jImgLabel = new javax.swing.JLabel();
        jPickButton = new javax.swing.JButton();
        jNoteLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPickButton.setText("PICK");
        jPickButton.setToolTipText("Background frame should not contain any object");
        jPickButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPickButtonActionPerformed(evt);
            }
        });

        jNoteLabel.setText("Please pick background frame for change detection");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jImgLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(289, 289, 289)
                .addComponent(jPickButton, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jNoteLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jImgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jPickButton)
                    .addComponent(jNoteLabel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPickButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPickButtonActionPerformed
        // TODO add your handling code here:
        frameCap=true;
        jPickButton.setEnabled(false);
    }//GEN-LAST:event_jPickButtonActionPerformed

    void enabledPickButton(){
        jPickButton.setEnabled(true);
    }
    
    public void addImageOnLabel(Mat mat) {
        Mat dst = new Mat();
        Imgproc.resize(mat, dst, new Size(801, 592));

        BufferedImage dstImage = Mat2BufferedImage(dst);
        ImageIcon image = new ImageIcon(dstImage);

        jImgLabel.setIcon(image);
        jImgLabel.validate();
        jImgLabel.repaint();
        this.setVisible(true);

    }

    public BufferedImage Mat2BufferedImage(Mat m) {
        int type = BufferedImage.TYPE_BYTE_GRAY;
        if (m.channels() > 1) {
            type = BufferedImage.TYPE_3BYTE_BGR;
        }
        int bufferSize = m.channels() * m.cols() * m.rows();
        byte[] b = new byte[bufferSize];
        m.get(0, 0, b); // get all the pixels
        BufferedImage img = new BufferedImage(m.cols(), m.rows(), type);
        final byte[] targetPixels = ((DataBufferByte) img.getRaster().getDataBuffer()).getData();
        System.arraycopy(b, 0, targetPixels, 0, b.length);
        return img;
    }

    void cropImage(Mat cropMat) {

        try {
                BufferedImage SubImgage =  Mat2BufferedImage(cropMat);

                File outputfile = new File("object"+ k++ +".jpg");
                ImageIO.write(SubImgage, "jpg", outputfile);
                
        } catch (IOException e) {
        } 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jImgLabel;
    private javax.swing.JLabel jNoteLabel;
    private javax.swing.JButton jPickButton;
    // End of variables declaration//GEN-END:variables
}
